{"ast":null,"code":"export const getFloatval = string => {\n  console.log(\"string\", string);\n  let floatValue = string.match(/[+-]?\\d+(\\.\\d+)?/g)[0];\n  return null !== floatValue ? parseFloat(parseFloat(floatValue).toFixed(2)) : '';\n};\nexport const addFirstProduct = product => {\n  console.log('heey from inside the addproduct');\n  let productPrice = getFloatval(product.price); //if no item in the cart, create an n empty array and pushe the item\n\n  let newCart = {\n    products: [],\n    totalProductsCount: 1,\n    totalProductsPrice: productPrice\n  };\n  const newProduct = createNewProduct(product, productPrice, 1); //qty is 1 b/c its the first time we're creating it\n\n  newCart.products.push(newProduct);\n  localStorage.setItem('woo-next-cart', JSON.stringify(newCart));\n  return newCart;\n}; //CREATE A NEW PRODUCT OBJECT\n\nexport const createNewProduct = (product, productPrice, qty) => {\n  return {\n    productId: product.productId,\n    image: product.image,\n    name: product.name,\n    price: productPrice,\n    qty: qty,\n    totalPrice: parseFloat((productPrice * qty).toFixed(2))\n  };\n};\nexport const updateCart = (existingCart, product, qtyToBeAdded, newQty = false) => {\n  const updatedProducts = getUpdatedProducts(existingCart.products, product, qtyToBeAdded, newQty);\n};\nexport const getUpdatedProducts = (existingProductsInCart, product, qtyToBeAdded, newQty = false) => {\n  //does product already exist in cart\n  const productExistsIndex = isProductInCart(existingProductsInCart, product.productId);\n};\nexport const isProductInCart = (existingProductsInCart, productId) => {\n  console.log(\"hee hee\", existingProductsInCart, productId);\n\n  const returnItemThatExists = (item, index) => {\n    if (productId === item.productId) {\n      return item;\n    }\n  };\n\n  const newArray = existingProductsInCart.filter(returnItemThatExists);\n  return existingProductsInCart.indexOf(newArray[0]);\n};","map":{"version":3,"sources":["/Users/Eunice/WebDev/Fellowship/woo-less/function.js"],"names":["getFloatval","string","console","log","floatValue","match","parseFloat","toFixed","addFirstProduct","product","productPrice","price","newCart","products","totalProductsCount","totalProductsPrice","newProduct","createNewProduct","push","localStorage","setItem","JSON","stringify","qty","productId","image","name","totalPrice","updateCart","existingCart","qtyToBeAdded","newQty","updatedProducts","getUpdatedProducts","existingProductsInCart","productExistsIndex","isProductInCart","returnItemThatExists","item","index","newArray","filter","indexOf"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAGC,MAAD,IAAU;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;AAEA,MAAIG,UAAU,GAAGH,MAAM,CAACI,KAAP,CAAc,mBAAd,EAAoC,CAApC,CAAjB;AACH,SAAQ,SAASD,UAAV,GAAuBE,UAAU,CAAEA,UAAU,CAAEF,UAAF,CAAV,CAAyBG,OAAzB,CAAkC,CAAlC,CAAF,CAAjC,GAA6E,EAApF;AACA,CALM;AAOP,OAAO,MAAMC,eAAe,GAAEC,OAAD,IAAW;AACpCP,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACA,MAAIO,YAAY,GAAGV,WAAW,CAACS,OAAO,CAACE,KAAT,CAA9B,CAFoC,CAKpC;;AAEA,MAAIC,OAAO,GAAE;AACTC,IAAAA,QAAQ,EAAC,EADA;AAETC,IAAAA,kBAAkB,EAAC,CAFV;AAGTC,IAAAA,kBAAkB,EAACL;AAHV,GAAb;AAMA,QAAMM,UAAU,GAAGC,gBAAgB,CAACR,OAAD,EAAUC,YAAV,EAAwB,CAAxB,CAAnC,CAboC,CAa2B;;AACnEE,EAAAA,OAAO,CAACC,QAAR,CAAiBK,IAAjB,CAAsBF,UAAtB;AACAG,EAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCC,IAAI,CAACC,SAAL,CAAeV,OAAf,CAAtC;AACA,SAAOA,OAAP;AACC,CAjBM,C,CAmBP;;AAGA,OAAO,MAAMK,gBAAgB,GAAE,CAACR,OAAD,EAAUC,YAAV,EAAwBa,GAAxB,KAA8B;AACzD,SAAM;AACFC,IAAAA,SAAS,EAAEf,OAAO,CAACe,SADjB;AAEFC,IAAAA,KAAK,EAAChB,OAAO,CAACgB,KAFZ;AAGFC,IAAAA,IAAI,EAACjB,OAAO,CAACiB,IAHX;AAIFf,IAAAA,KAAK,EAACD,YAJJ;AAKFa,IAAAA,GAAG,EAAEA,GALH;AAMFI,IAAAA,UAAU,EAAErB,UAAU,CAAC,CAACI,YAAY,GAAGa,GAAhB,EAAqBhB,OAArB,CAA6B,CAA7B,CAAD;AANpB,GAAN;AAQH,CATM;AAWP,OAAO,MAAMqB,UAAU,GAAE,CAACC,YAAD,EAAepB,OAAf,EAAwBqB,YAAxB,EAAsCC,MAAM,GAAC,KAA7C,KAAqD;AAC1E,QAAMC,eAAe,GAAGC,kBAAkB,CAACJ,YAAY,CAAChB,QAAd,EAAwBJ,OAAxB,EAAiCqB,YAAjC,EAA+CC,MAA/C,CAA1C;AACH,CAFM;AAIP,OAAO,MAAME,kBAAkB,GAAE,CAACC,sBAAD,EAAyBzB,OAAzB,EAAkCqB,YAAlC,EAAgDC,MAAM,GAAC,KAAvD,KAA+D;AAC5F;AACA,QAAMI,kBAAkB,GAAGC,eAAe,CAACF,sBAAD,EAAyBzB,OAAO,CAACe,SAAjC,CAA1C;AAEH,CAJM;AAMP,OAAO,MAAMY,eAAe,GAAC,CAACF,sBAAD,EAAyBV,SAAzB,KAAqC;AAC9DtB,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB+B,sBAAvB,EAA+CV,SAA/C;;AACA,QAAMa,oBAAoB,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAe;AACxC,QAAGf,SAAS,KAAKc,IAAI,CAACd,SAAtB,EAAgC;AAC5B,aAAOc,IAAP;AACH;AAEJ,GALD;;AAMA,QAAME,QAAQ,GAAGN,sBAAsB,CAACO,MAAvB,CAA8BJ,oBAA9B,CAAjB;AACA,SAAOH,sBAAsB,CAACQ,OAAvB,CAA+BF,QAAQ,CAAC,CAAD,CAAvC,CAAP;AAEH,CAXM","sourcesContent":["export const getFloatval =(string)=>{\n    console.log(\"string\", string)\n\n    let floatValue = string.match( /[+-]?\\d+(\\.\\d+)?/g )[0];\n\treturn (null !== floatValue)? parseFloat( parseFloat( floatValue ).toFixed( 2 ) ) : '';\n}\n\nexport const addFirstProduct=(product)=>{\n    console.log('heey from inside the addproduct')\n    let productPrice = getFloatval(product.price)\n\n\n    //if no item in the cart, create an n empty array and pushe the item\n\n    let newCart ={\n        products:[],\n        totalProductsCount:1, \n        totalProductsPrice:productPrice\n    }\n\n    const newProduct = createNewProduct(product, productPrice, 1); //qty is 1 b/c its the first time we're creating it\nnewCart.products.push(newProduct);\nlocalStorage.setItem('woo-next-cart', JSON.stringify(newCart));\nreturn newCart\n}\n\n//CREATE A NEW PRODUCT OBJECT\n\n\nexport const createNewProduct =(product, productPrice, qty)=>{\n    return{\n        productId: product.productId,\n        image:product.image,\n        name:product.name,\n        price:productPrice,\n        qty: qty,\n        totalPrice: parseFloat((productPrice * qty).toFixed(2))\n    }\n}\n\nexport const updateCart= (existingCart, product, qtyToBeAdded, newQty=false)=>{\n    const updatedProducts = getUpdatedProducts(existingCart.products, product, qtyToBeAdded, newQty);\n}\n\nexport const getUpdatedProducts =(existingProductsInCart, product, qtyToBeAdded, newQty=false)=>{\n    //does product already exist in cart\n    const productExistsIndex = isProductInCart(existingProductsInCart, product.productId)\n\n}\n\nexport const isProductInCart=(existingProductsInCart, productId)=>{\n    console.log(\"hee hee\", existingProductsInCart, productId)\n    const returnItemThatExists = (item, index)=>{\n        if(productId === item.productId){\n            return item;\n        }\n\n    }\n    const newArray = existingProductsInCart.filter(returnItemThatExists);\n    return existingProductsInCart.indexOf(newArray[0]);\n\n}\n"]},"metadata":{},"sourceType":"module"}