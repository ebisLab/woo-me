{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Eunice/WebDev/Fellowship/woo-less/pages/product.js\",\n    _this = this;\n\nimport Layout from '../components/Layout';\nimport { withRouter } from 'next/router';\nimport client from '../components/ApolloClient';\nimport gql from 'graphql-tag';\n\nvar Product = function Product(props) {\n  console.log(\"PROPS\", props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"product\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, _this);\n}; //getInitialProps function gets excecuted in both client side and server side, first in server side\n\n\n_c = Product;\n\nProduct.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var slug;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            //context comes from server side, bring it to the client side\n            slug = context.query.slug; // const id=slug? parseInt(slug.split('-').pop()): context.query.id //parseInt(slug.split('-')) used to split words or numbers that are separeted with space or any symbols like \"-\"\n\n            console.log(\"trying to get initial props\"); //Graphql Query\n            // const PRODUCT_QUERY = gql`query Product($id: Int !){\n            //     productBy( productId:$id )D{\n            //         id\n            //         productId\n            //         averageRating\n            //         slug\n            //         description\n            //         image {\n            //             uri\n            //             title\n            //             srcSet\n            //             sourceUrl\n            //         }\n            //         name\n            //         price\n            //     }\n            // }`;\n            //     const PRODUCT_QUERY = gql` query Product($databaseId: ID!){\n            //         product(id: $databaseId, idType: DATABASE_ID) {\n            //             id\n            //             databaseId\n            //             averageRating\n            //             slug\n            //             description\n            //             purchasable\n            //             name\n            //         }\n            //     }\n            //     `;\n            //     const res= await client.query({\n            //         query: PRODUCT_QUERY,\n            //         variables:{\n            //             databaseId: id\n            // }\n            //     });\n\n            return _context.abrupt(\"return\", {\n              product: \"id\"\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default _c2 = withRouter(Product);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Product\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/Eunice/WebDev/Fellowship/woo-less/pages/product.js"],"names":["Layout","withRouter","client","gql","Product","props","console","log","getInitialProps","context","slug","query","product"],"mappings":";;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,SAAQC,UAAR,QAAyB,aAAzB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAS;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AAOH,CATD,C,CAWA;;;KAXMD,O;;AAYNA,OAAO,CAACI,eAAR;AAAA,sEAA0B,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmB;AAC7BC,YAAAA,IADU,GACHD,OADG,CACjBE,KADiB,CACVD,IADU,EAEtB;;AAEAJ,YAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAJsB,CAKtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AA1C0B,6CA4Cf;AACHK,cAAAA,OAAO,EAAE;AADN,aA5Ce;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AAiDA,qBAAeX,UAAU,CAACG,OAAD,CAAzB","sourcesContent":["import Layout from '../components/Layout';\nimport {withRouter} from 'next/router';\nimport client from '../components/ApolloClient'\nimport gql from 'graphql-tag';\n\nconst Product = (props)=>{\n    console.log(\"PROPS\", props)\n    return(\n        <div>\n            product\n            {/* query */}\n\n        </div>\n    )\n}\n\n//getInitialProps function gets excecuted in both client side and server side, first in server side\nProduct.getInitialProps = async (context)=>{ //context comes from server side, bring it to the client side\n    let {query:{slug}}=context;\n    // const id=slug? parseInt(slug.split('-').pop()): context.query.id //parseInt(slug.split('-')) used to split words or numbers that are separeted with space or any symbols like \"-\"\n\n    console.log(\"trying to get initial props\")\n    //Graphql Query\n    // const PRODUCT_QUERY = gql`query Product($id: Int !){\n    //     productBy( productId:$id )D{\n    //         id\n    //         productId\n    //         averageRating\n    //         slug\n    //         description\n    //         image {\n    //             uri\n    //             title\n    //             srcSet\n    //             sourceUrl\n    //         }\n    //         name\n    //         price\n    //     }\n    // }`;\n\n//     const PRODUCT_QUERY = gql` query Product($databaseId: ID!){\n//         product(id: $databaseId, idType: DATABASE_ID) {\n//             id\n//             databaseId\n//             averageRating\n//             slug\n//             description\n//             purchasable\n//             name\n//         }\n//     }\n//     `;\n\n//     const res= await client.query({\n//         query: PRODUCT_QUERY,\n//         variables:{\n//             databaseId: id\n// }\n//     });\n\n    return {\n        product: \"id\"\n    }\n}\n\nexport default withRouter(Product);"]},"metadata":{},"sourceType":"module"}