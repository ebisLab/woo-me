{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/Eunice/WebDev/Fellowship/woo-less/pages/product.js\";\nimport Layout from '../components/Layout';\nimport { withRouter } from 'next/router';\nimport client from '../components/ApolloClient';\nimport gql from 'graphql-tag';\n\nconst Product = props => {\n  console.log(\"PROPS\", props);\n  const {\n    product\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"SOMETHING HERE\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n}; //getInitialProps function gets excecuted in both client side and server side, first in server side\n\n\nProduct.getInitialProps = async context => {\n  //context comes from server side, bring it to the client side\n  let {\n    query: {\n      slug\n    }\n  } = context;\n  const id = slug ? parseInt(slug.split('-').pop()) : context.query.id; //parseInt(slug.split('-')) used to split words or numbers that are separeted with space or any symbols like \"-\"\n  //Graphql Query\n\n  const PRODUCT_QUERY = gql` query Product($id: ID!){\n        product(id: $id, idType: DATABASE_ID) {\n            id\n            productId\n            averageRating\n            slug\n            description\n            name\n            image{\n                uri\n                title\n                srcSet\n                sourceUrl\n            }\n            ... on SimpleProduct {\n                id\n                name\n                price\n              }\n        }\n    }\n    `;\n  const res = await client.query({\n    query: PRODUCT_QUERY,\n    variables: {\n      id\n    }\n  });\n  return {\n    product: res.data.product\n  };\n};\n\nexport default withRouter(Product);","map":{"version":3,"sources":["/Users/Eunice/WebDev/Fellowship/woo-less/pages/product.js"],"names":["Layout","withRouter","client","gql","Product","props","console","log","product","getInitialProps","context","query","slug","id","parseInt","split","pop","PRODUCT_QUERY","res","variables","data"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,SAAQC,UAAR,QAAyB,aAAzB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAS;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,QAAM;AAACG,IAAAA;AAAD,MAAUH,KAAhB;AACA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CAxBD,C,CA0BA;;;AACAD,OAAO,CAACK,eAAR,GAA0B,MAAOC,OAAP,IAAiB;AAAE;AACzC,MAAI;AAACC,IAAAA,KAAK,EAAC;AAACC,MAAAA;AAAD;AAAP,MAAeF,OAAnB;AACA,QAAMG,EAAE,GAACD,IAAI,GAAEE,QAAQ,CAACF,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgBC,GAAhB,EAAD,CAAV,GAAmCN,OAAO,CAACC,KAAR,CAAcE,EAA9D,CAFuC,CAE0B;AAEjE;;AAEA,QAAMI,aAAa,GAAGd,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KArBI;AAuBA,QAAMe,GAAG,GAAE,MAAMhB,MAAM,CAACS,KAAP,CAAa;AAC1BA,IAAAA,KAAK,EAAEM,aADmB;AAE1BE,IAAAA,SAAS,EAAC;AAACN,MAAAA;AAAD;AAFgB,GAAb,CAAjB;AAKA,SAAO;AACHL,IAAAA,OAAO,EAAEU,GAAG,CAACE,IAAJ,CAASZ;AADf,GAAP;AAGH,CArCD;;AAuCA,eAAeP,UAAU,CAACG,OAAD,CAAzB","sourcesContent":["import Layout from '../components/Layout';\nimport {withRouter} from 'next/router';\nimport client from '../components/ApolloClient'\nimport gql from 'graphql-tag';\n\nconst Product = (props)=>{\n    console.log(\"PROPS\", props)\n    const {product}=props\n    return(\n        <div>\n            {/* query */}\n            SOMETHING HERE\n            {/* <Layout>\n                {product?(\n                    <div className=\"card bg-light mb-3 p-5\">\n                        <div className=\"card-header\">{product.name}</div>\n                        <div className=\"card-body\">\n                            <h4>{product.name}</h4>\n                            <img src={product.image.sourceUrl} width=\"200px\" alt={product.name} srcSet={product.image.srcSet}/>\n                            <p className=\"card-text\">{product.description}</p>\n                        </div>\n\n\n                    </div>\n                ):''}\n                </Layout> */}\n\n        </div>\n    )\n}\n\n//getInitialProps function gets excecuted in both client side and server side, first in server side\nProduct.getInitialProps = async (context)=>{ //context comes from server side, bring it to the client side\n    let {query:{slug}}=context;\n    const id=slug? parseInt(slug.split('-').pop()): context.query.id //parseInt(slug.split('-')) used to split words or numbers that are separeted with space or any symbols like \"-\"\n\n    //Graphql Query\n\n    const PRODUCT_QUERY = gql` query Product($id: ID!){\n        product(id: $id, idType: DATABASE_ID) {\n            id\n            productId\n            averageRating\n            slug\n            description\n            name\n            image{\n                uri\n                title\n                srcSet\n                sourceUrl\n            }\n            ... on SimpleProduct {\n                id\n                name\n                price\n              }\n        }\n    }\n    `;\n\n    const res= await client.query({\n        query: PRODUCT_QUERY,\n        variables:{id}\n    });\n\n    return {\n        product: res.data.product\n    }\n}\n\nexport default withRouter(Product);"]},"metadata":{},"sourceType":"module"}