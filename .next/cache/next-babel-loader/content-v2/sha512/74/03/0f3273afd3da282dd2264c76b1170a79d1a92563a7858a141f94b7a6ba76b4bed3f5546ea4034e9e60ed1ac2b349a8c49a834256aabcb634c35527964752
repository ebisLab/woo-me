{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/Eunice/WebDev/Fellowship/woo-less/pages/product.js\";\nimport Layout from '../components/Layout';\nimport { withRouter } from 'next/router';\nimport client from '../components/ApolloClient';\nimport gql from 'graphql-tag';\n\nconst Product = props => {\n  console.log(\"PROPS\", props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"product\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}; //getInitialProps function gets excecuted in both client side and server side, first in server side\n\n\nProduct.getInitialProps = async context => {\n  //context comes from server side, bring it to the client side\n  let {\n    query: {\n      slug\n    }\n  } = context;\n  const id = slug ? parseInt(slug.split('-').pop()) : context.query.id; //parseInt(slug.split('-')) used to split words or numbers that are separeted with space or any symbols like \"-\"\n  //Graphql Query\n  // const PRODUCT_QUERY = gql`query Product($id: Int !){\n  //     productBy( productId:$id )D{\n  //         id\n  //         productId\n  //         averageRating\n  //         slug\n  //         description\n  //         image {\n  //             uri\n  //             title\n  //             srcSet\n  //             sourceUrl\n  //         }\n  //         name\n  //         price\n  //     }\n  // }`;\n\n  const PRODUCT_QUERY = gql`query{\n        product( id:$id )D{\n            id\n            productId\n        }\n    }`;\n  const res = await client.query({\n    query: PRODUCT_QUERY,\n    variables: {\n      id\n    }\n  });\n  return {\n    product: res.data\n  };\n};\n\nexport default withRouter(Product);","map":{"version":3,"sources":["/Users/Eunice/WebDev/Fellowship/woo-less/pages/product.js"],"names":["Layout","withRouter","client","gql","Product","props","console","log","getInitialProps","context","query","slug","id","parseInt","split","pop","PRODUCT_QUERY","res","variables","product","data"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,SAAQC,UAAR,QAAyB,aAAzB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAS;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CATD,C,CAWA;;;AACAD,OAAO,CAACI,eAAR,GAA0B,MAAOC,OAAP,IAAiB;AAAE;AACzC,MAAI;AAACC,IAAAA,KAAK,EAAC;AAACC,MAAAA;AAAD;AAAP,MAAeF,OAAnB;AACA,QAAMG,EAAE,GAACD,IAAI,GAAEE,QAAQ,CAACF,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgBC,GAAhB,EAAD,CAAV,GAAmCN,OAAO,CAACC,KAAR,CAAcE,EAA9D,CAFuC,CAE0B;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,QAAMI,aAAa,GAAGb,GAAI;AAClC;AACA;AACA;AACA;AACA,MALQ;AAOJ,QAAMc,GAAG,GAAE,MAAMf,MAAM,CAACQ,KAAP,CAAc;AAC3BA,IAAAA,KAAK,EAAEM,aADoB;AAE3BE,IAAAA,SAAS,EAAC;AAACN,MAAAA;AAAD;AAFiB,GAAd,CAAjB;AAKA,SAAO;AACHO,IAAAA,OAAO,EAACF,GAAG,CAACG;AADT,GAAP;AAGH,CAtCD;;AAwCA,eAAenB,UAAU,CAACG,OAAD,CAAzB","sourcesContent":["import Layout from '../components/Layout';\nimport {withRouter} from 'next/router';\nimport client from '../components/ApolloClient'\nimport gql from 'graphql-tag';\n\nconst Product = (props)=>{\n    console.log(\"PROPS\", props)\n    return(\n        <div>\n            product\n            {/* query */}\n\n        </div>\n    )\n}\n\n//getInitialProps function gets excecuted in both client side and server side, first in server side\nProduct.getInitialProps = async (context)=>{ //context comes from server side, bring it to the client side\n    let {query:{slug}}=context;\n    const id=slug? parseInt(slug.split('-').pop()): context.query.id //parseInt(slug.split('-')) used to split words or numbers that are separeted with space or any symbols like \"-\"\n\n    //Graphql Query\n    // const PRODUCT_QUERY = gql`query Product($id: Int !){\n    //     productBy( productId:$id )D{\n    //         id\n    //         productId\n    //         averageRating\n    //         slug\n    //         description\n    //         image {\n    //             uri\n    //             title\n    //             srcSet\n    //             sourceUrl\n    //         }\n    //         name\n    //         price\n    //     }\n    // }`;\n\n        const PRODUCT_QUERY = gql`query{\n        product( id:$id )D{\n            id\n            productId\n        }\n    }`;\n\n    const res= await client.query(({\n        query: PRODUCT_QUERY,\n        variables:{id}\n    }));\n\n    return {\n        product:res.data\n    }\n}\n\nexport default withRouter(Product);"]},"metadata":{},"sourceType":"module"}