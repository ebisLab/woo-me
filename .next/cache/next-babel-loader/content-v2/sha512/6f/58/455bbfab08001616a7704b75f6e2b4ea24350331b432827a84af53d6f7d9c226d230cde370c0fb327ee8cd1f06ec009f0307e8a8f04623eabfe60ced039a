{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Eunice/WebDev/Fellowship/woo-less/pages/product.js\",\n    _this = this;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\" query Product($id: ID!){\\n        product(id: $id, idType: DATABASE_ID) {\\n            id\\n            productId\\n            averageRating\\n            slug\\n            description\\n            name\\n            image{\\n                uri\\n                title\\n                srcSet\\n                sourceUrl\\n            }\\n            ... on SimpleProduct {\\n                id\\n                name\\n                price\\n              }\\n        }\\n    }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Layout from '../components/Layout';\nimport { withRouter } from 'next/router';\nimport client from '../components/ApolloClient';\nimport gql from 'graphql-tag';\n\nvar Product = function Product(props) {\n  console.log(\"PROPS\", props);\n  var product = props.product;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      children: product ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card bg-light mb-3 p-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: product.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: product.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 29\n          }, _this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: product.image.sourceUrl,\n            width: \"200px\",\n            alt: product.name,\n            srcSet: product.image.srcSet\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 29\n          }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-text\",\n            children: product.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 29\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 25\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 21\n      }, _this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, _this);\n}; //getInitialProps function gets excecuted in both client side and server side, first in server side\n\n\n_c = Product;\n\nProduct.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var slug, id, PRODUCT_QUERY, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            //context comes from server side, bring it to the client side\n            slug = context.query.slug;\n            id = slug ? parseInt(slug.split('-').pop()) : context.query.id; //parseInt(slug.split('-')) used to split words or numbers that are separeted with space or any symbols like \"-\"\n            //Graphql Query\n\n            PRODUCT_QUERY = gql(_templateObject());\n            _context.next = 5;\n            return client.query({\n              query: PRODUCT_QUERY,\n              variables: {\n                id: id\n              }\n            });\n\n          case 5:\n            res = _context.sent;\n            return _context.abrupt(\"return\", {\n              product: res.data.product\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default _c2 = withRouter(Product);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Product\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/Eunice/WebDev/Fellowship/woo-less/pages/product.js"],"names":["Layout","withRouter","client","gql","Product","props","console","log","product","name","image","sourceUrl","srcSet","description","getInitialProps","context","slug","query","id","parseInt","split","pop","PRODUCT_QUERY","variables","res","data"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,SAAQC,UAAR,QAAyB,aAAzB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAS;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AADqB,MAEdG,OAFc,GAELH,KAFK,CAEdG,OAFc;AAGrB,sBACI;AAAA,2BAEI,QAAC,MAAD;AAAA,gBACKA,OAAO,gBACJ;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,oBAA8BA,OAAO,CAACC;AAAtC;AAAA;AAAA;AAAA;AAAA,iBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACI;AAAA,sBAAKD,OAAO,CAACC;AAAb;AAAA;AAAA;AAAA;AAAA,mBADJ,eAEI;AAAK,YAAA,GAAG,EAAED,OAAO,CAACE,KAAR,CAAcC,SAAxB;AAAmC,YAAA,KAAK,EAAC,OAAzC;AAAiD,YAAA,GAAG,EAAEH,OAAO,CAACC,IAA9D;AAAoE,YAAA,MAAM,EAAED,OAAO,CAACE,KAAR,CAAcE;AAA1F;AAAA;AAAA;AAAA;AAAA,mBAFJ,eAGI;AAAG,YAAA,SAAS,EAAC,WAAb;AAAA,sBAA0BJ,OAAO,CAACK;AAAlC;AAAA;AAAA;AAAA;AAAA,mBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,eADI,GAWN;AAZN;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAoBH,CAvBD,C,CAyBA;;;KAzBMT,O;;AA0BNA,OAAO,CAACU,eAAR;AAAA,sEAA0B,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmB;AAC7BC,YAAAA,IADU,GACHD,OADG,CACjBE,KADiB,CACVD,IADU;AAEhBE,YAAAA,EAFgB,GAEbF,IAAI,GAAEG,QAAQ,CAACH,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,GAAhB,EAAD,CAAV,GAAmCN,OAAO,CAACE,KAAR,CAAcC,EAFxC,EAE2C;AAEjE;;AAEMI,YAAAA,aANgB,GAMAnB,GANA;AAAA;AAAA,mBA6BLD,MAAM,CAACe,KAAP,CAAa;AAC1BA,cAAAA,KAAK,EAAEK,aADmB;AAE1BC,cAAAA,SAAS,EAAC;AAACL,gBAAAA,EAAE,EAAFA;AAAD;AAFgB,aAAb,CA7BK;;AAAA;AA6BhBM,YAAAA,GA7BgB;AAAA,6CAkCf;AACHhB,cAAAA,OAAO,EAAEgB,GAAG,CAACC,IAAJ,CAASjB;AADf,aAlCe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AAuCA,qBAAeP,UAAU,CAACG,OAAD,CAAzB","sourcesContent":["import Layout from '../components/Layout';\nimport {withRouter} from 'next/router';\nimport client from '../components/ApolloClient'\nimport gql from 'graphql-tag';\n\nconst Product = (props)=>{\n    console.log(\"PROPS\", props)\n    const {product}=props\n    return(\n        <div>\n            {/* query */}\n            <Layout>\n                {product?(\n                    <div className=\"card bg-light mb-3 p-5\">\n                        <div className=\"card-header\">{product.name}</div>\n                        <div className=\"card-body\">\n                            <h4>{product.name}</h4>\n                            <img src={product.image.sourceUrl} width=\"200px\" alt={product.name} srcSet={product.image.srcSet}/>\n                            <p className=\"card-text\">{product.description}</p>\n                        </div>\n\n\n                    </div>\n                ):''}\n                </Layout>\n\n        </div>\n    )\n}\n\n//getInitialProps function gets excecuted in both client side and server side, first in server side\nProduct.getInitialProps = async (context)=>{ //context comes from server side, bring it to the client side\n    let {query:{slug}}=context;\n    const id=slug? parseInt(slug.split('-').pop()): context.query.id //parseInt(slug.split('-')) used to split words or numbers that are separeted with space or any symbols like \"-\"\n\n    //Graphql Query\n\n    const PRODUCT_QUERY = gql` query Product($id: ID!){\n        product(id: $id, idType: DATABASE_ID) {\n            id\n            productId\n            averageRating\n            slug\n            description\n            name\n            image{\n                uri\n                title\n                srcSet\n                sourceUrl\n            }\n            ... on SimpleProduct {\n                id\n                name\n                price\n              }\n        }\n    }\n    `;\n\n    const res= await client.query({\n        query: PRODUCT_QUERY,\n        variables:{id}\n    });\n\n    return {\n        product: res.data.product\n    }\n}\n\nexport default withRouter(Product);"]},"metadata":{},"sourceType":"module"}